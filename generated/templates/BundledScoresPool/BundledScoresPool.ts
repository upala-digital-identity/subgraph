// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MetaDataUpdate extends ethereum.Event {
  get params(): MetaDataUpdate__Params {
    return new MetaDataUpdate__Params(this);
  }
}

export class MetaDataUpdate__Params {
  _event: MetaDataUpdate;

  constructor(event: MetaDataUpdate) {
    this._event = event;
  }

  get metadata(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class NewBaseScore extends ethereum.Event {
  get params(): NewBaseScore__Params {
    return new NewBaseScore__Params(this);
  }
}

export class NewBaseScore__Params {
  _event: NewBaseScore;

  constructor(event: NewBaseScore) {
    this._event = event;
  }

  get newBaseScore(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewScoreBundleId extends ethereum.Event {
  get params(): NewScoreBundleId__Params {
    return new NewScoreBundleId__Params(this);
  }
}

export class NewScoreBundleId__Params {
  _event: NewScoreBundleId;

  constructor(event: NewScoreBundleId) {
    this._event = event;
  }

  get newScoreBundleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ScoreBundleIdDeleted extends ethereum.Event {
  get params(): ScoreBundleIdDeleted__Params {
    return new ScoreBundleIdDeleted__Params(this);
  }
}

export class ScoreBundleIdDeleted__Params {
  _event: ScoreBundleIdDeleted;

  constructor(event: ScoreBundleIdDeleted) {
    this._event = event;
  }

  get scoreBundleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class BundledScoresPool extends ethereum.SmartContract {
  static bind(address: Address): BundledScoresPool {
    return new BundledScoresPool("BundledScoresPool", address);
  }

  approvedToken(): Address {
    let result = super.call("approvedToken", "approvedToken():(address)", []);

    return result[0].toAddress();
  }

  try_approvedToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "approvedToken",
      "approvedToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  attack(
    upalaID: Address,
    scoreAssignedTo: Address,
    score: i32,
    bundleId: Bytes,
    proof: Bytes
  ): BigInt {
    let result = super.call(
      "attack",
      "attack(address,address,uint8,bytes32,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(upalaID),
        ethereum.Value.fromAddress(scoreAssignedTo),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(score)),
        ethereum.Value.fromFixedBytes(bundleId),
        ethereum.Value.fromBytes(proof)
      ]
    );

    return result[0].toBigInt();
  }

  try_attack(
    upalaID: Address,
    scoreAssignedTo: Address,
    score: i32,
    bundleId: Bytes,
    proof: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "attack",
      "attack(address,address,uint8,bytes32,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(upalaID),
        ethereum.Value.fromAddress(scoreAssignedTo),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(score)),
        ethereum.Value.fromFixedBytes(bundleId),
        ethereum.Value.fromBytes(proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseScore(): BigInt {
    let result = super.call("baseScore", "baseScore():(uint256)", []);

    return result[0].toBigInt();
  }

  try_baseScore(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("baseScore", "baseScore():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getScoreBundleIdTimestamp(scoreBundleId: Bytes): BigInt {
    let result = super.call(
      "getScoreBundleIdTimestamp",
      "getScoreBundleIdTimestamp(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(scoreBundleId)]
    );

    return result[0].toBigInt();
  }

  try_getScoreBundleIdTimestamp(
    scoreBundleId: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getScoreBundleIdTimestamp",
      "getScoreBundleIdTimestamp(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(scoreBundleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  groupBaseScore(): BigInt {
    let result = super.call("groupBaseScore", "groupBaseScore():(uint256)", []);

    return result[0].toBigInt();
  }

  try_groupBaseScore(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "groupBaseScore",
      "groupBaseScore():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  metaData(): string {
    let result = super.call("metaData", "metaData():(string)", []);

    return result[0].toString();
  }

  try_metaData(): ethereum.CallResult<string> {
    let result = super.tryCall("metaData", "metaData():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  myScore(
    upalaID: Address,
    scoreAssignedTo: Address,
    score: i32,
    bundleId: Bytes,
    proof: Bytes
  ): BigInt {
    let result = super.call(
      "myScore",
      "myScore(address,address,uint8,bytes32,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(upalaID),
        ethereum.Value.fromAddress(scoreAssignedTo),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(score)),
        ethereum.Value.fromFixedBytes(bundleId),
        ethereum.Value.fromBytes(proof)
      ]
    );

    return result[0].toBigInt();
  }

  try_myScore(
    upalaID: Address,
    scoreAssignedTo: Address,
    score: i32,
    bundleId: Bytes,
    proof: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "myScore",
      "myScore(address,address,uint8,bytes32,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(upalaID),
        ethereum.Value.fromAddress(scoreAssignedTo),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(score)),
        ethereum.Value.fromFixedBytes(bundleId),
        ethereum.Value.fromBytes(proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  publishScoreBundleId(newBundleId: Bytes): BigInt {
    let result = super.call(
      "publishScoreBundleId",
      "publishScoreBundleId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(newBundleId)]
    );

    return result[0].toBigInt();
  }

  try_publishScoreBundleId(newBundleId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "publishScoreBundleId",
      "publishScoreBundleId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(newBundleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  scoreBundleTimestamp(param0: Bytes): BigInt {
    let result = super.call(
      "scoreBundleTimestamp",
      "scoreBundleTimestamp(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_scoreBundleTimestamp(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "scoreBundleTimestamp",
      "scoreBundleTimestamp(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  upala(): Address {
    let result = super.call("upala", "upala():(address)", []);

    return result[0].toAddress();
  }

  try_upala(): ethereum.CallResult<Address> {
    let result = super.tryCall("upala", "upala():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userScore(
    userAddress: Address,
    upalaID: Address,
    scoreAssignedTo: Address,
    score: i32,
    bundleId: Bytes,
    proof: Bytes
  ): BigInt {
    let result = super.call(
      "userScore",
      "userScore(address,address,address,uint8,bytes32,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(userAddress),
        ethereum.Value.fromAddress(upalaID),
        ethereum.Value.fromAddress(scoreAssignedTo),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(score)),
        ethereum.Value.fromFixedBytes(bundleId),
        ethereum.Value.fromBytes(proof)
      ]
    );

    return result[0].toBigInt();
  }

  try_userScore(
    userAddress: Address,
    upalaID: Address,
    scoreAssignedTo: Address,
    score: i32,
    bundleId: Bytes,
    proof: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userScore",
      "userScore(address,address,address,uint8,bytes32,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(userAddress),
        ethereum.Value.fromAddress(upalaID),
        ethereum.Value.fromAddress(scoreAssignedTo),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(score)),
        ethereum.Value.fromFixedBytes(bundleId),
        ethereum.Value.fromBytes(proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get upalaAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approvedTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get poolManager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AttackCall extends ethereum.Call {
  get inputs(): AttackCall__Inputs {
    return new AttackCall__Inputs(this);
  }

  get outputs(): AttackCall__Outputs {
    return new AttackCall__Outputs(this);
  }
}

export class AttackCall__Inputs {
  _call: AttackCall;

  constructor(call: AttackCall) {
    this._call = call;
  }

  get upalaID(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get scoreAssignedTo(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get score(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get bundleId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get proof(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class AttackCall__Outputs {
  _call: AttackCall;

  constructor(call: AttackCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PublishScoreBundleIdCall extends ethereum.Call {
  get inputs(): PublishScoreBundleIdCall__Inputs {
    return new PublishScoreBundleIdCall__Inputs(this);
  }

  get outputs(): PublishScoreBundleIdCall__Outputs {
    return new PublishScoreBundleIdCall__Outputs(this);
  }
}

export class PublishScoreBundleIdCall__Inputs {
  _call: PublishScoreBundleIdCall;

  constructor(call: PublishScoreBundleIdCall) {
    this._call = call;
  }

  get newBundleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PublishScoreBundleIdCall__Outputs {
  _call: PublishScoreBundleIdCall;

  constructor(call: PublishScoreBundleIdCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateMetadataCall extends ethereum.Call {
  get inputs(): UpdateMetadataCall__Inputs {
    return new UpdateMetadataCall__Inputs(this);
  }

  get outputs(): UpdateMetadataCall__Outputs {
    return new UpdateMetadataCall__Outputs(this);
  }
}

export class UpdateMetadataCall__Inputs {
  _call: UpdateMetadataCall;

  constructor(call: UpdateMetadataCall) {
    this._call = call;
  }

  get newMetadata(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UpdateMetadataCall__Outputs {
  _call: UpdateMetadataCall;

  constructor(call: UpdateMetadataCall) {
    this._call = call;
  }
}
