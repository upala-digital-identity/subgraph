# Users

type UpalaID @entity {
    id: ID!  # user Upala ID
    isExploded: Boolean!
    owner: Delegate!
    delegates: [Delegate!]! @derivedFrom(field: "upalaID")
}

type Delegate @entity {
    id: ID!  # delegate Ethereum address
    isOwner: Boolean!  # owner is delegate too (per protocol)
    isApproved: Boolean!
    upalaID: UpalaID!
}

# Pools

type PoolFactory @entity {
    id: ID!  # pool factory address
    isApproved: Boolean  # admin can switch poolFactories on and off
    pools: [Pool!]! @derivedFrom(field: "poolFactory")
}

type Pool @entity {
    # on pool creation
    id: ID!  # pool address
    poolFactory: PoolFactory!  # is used to select pool ABI
    
    # monitors ownership at creation and on OwnershipTransferred
    # OwnershipTransferred event is at Ownable contract
    owner: Bytes!
    
    # base score
    baseScore: BigInt!  # uint256
    # monitors DAI contract transfer event (todo - isn't it beter to check DAI)
    balance:  BigInt!  # uint256
    metadata: String  # metadata json
    scoreBundles: [ScoreBundle!]! @derivedFrom(field: "pool")
}

type ScoreBundle @entity {
    id: ID!  # score bundle hash (and root if Merkle tree)
    timestamp: BigInt!  # uint256
    isDeleted: Boolean!
    pool: Pool!
}

# Admin
type UpalaSettings @entity {
    id: ID!
    attackWindow: BigInt!
    executionWindow: BigInt!
    explosionFeePercent: Int!
    treasury: Bytes!
    owner: Bytes!
}

# DApps

type DApp @entity {
    id: ID!  # dapp address
    isRegistered: Boolean!  # dapp can be unregistered
    approvedPools: [Pool!]
}